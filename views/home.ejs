<%- include('partials/header'); -%>


  <div class="container">
    <div class="row">
      <div class="col-md-6 mt-3">
        <form id="upload-single" enctype="multipart/form-data">
          <h2 class="fw-bold d-flex align-items-center mb-3" style="border: 1px solid #0e0d10; padding: auto; padding-left: 10px; padding-right: 10px; border-radius: 5px; padding-top: 10px; padding-bottom: 10px; background-color: #cfcfcf;" >
          Single image    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-image" viewBox="0 0 16 16" style="margin-left: 10px;">
            <path d="M6.002 5.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0"/>
            <path d="M2.002 1a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2h-12zm12 1a1 1 0 0 1 1 1v6.5l-3.777-1.947a.5.5 0 0 0-.577.093l-3.71 3.71-2.66-1.772a.5.5 0 0 0-.63.062L1.002 12V3a1 1 0 0 1 1-1h12"/>
          </svg>     </h2>
          <label for="image">Add image</label>
          <input type="file" class="form-control" id="image-input" name="photo" accept="image/jpeg, image/png, image/jpg" required />
          <label for="hastags">Hastags</label>
          <div class="hashtag-dropdown">
            <div class="selected-hashtags">
            </div>
            <input type="text" class="form-control" id="hashtag-input" placeholder="Select hashtags...">
            <ul class="hashtag-list">
              <% for (let hastag of hastags) { %>
                <li>#<%=hastag%>
                </li>
                <% } %>
                  <!-- Add more hashtags as needed -->
            </ul>
          </div>

          <div class="hastag error"></div>
          <button type="submit" class="mt-3 color=#458CCB" id="submit-button">
Upload     <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-cloud-arrow-up" viewBox="0 0 16 16" style="margin-left: 10px;">
  <path fill-rule="evenodd" d="M7.646 5.146a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 6.707V10.5a.5.5 0 0 1-1 0V6.707L6.354 7.854a.5.5 0 1 1-.708-.708z"/>
  <path d="M4.406 3.342A5.53 5.53 0 0 1 8 2c2.69 0 4.923 2 5.166 4.579C14.758 6.804 16 8.137 16 9.773 16 11.569 14.502 13 12.687 13H3.781C1.708 13 0 11.366 0 9.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383zm.653.757c-.757.653-1.153 1.44-1.153 2.056v.448l-.445.049C2.064 6.805 1 7.952 1 9.318 1 10.785 2.23 12 3.781 12h8.906C13.98 12 15 10.988 15 9.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 4.825 10.328 3 8 3a4.53 4.53 0 0 0-2.941 1.1z"/>
</svg>         
          </button>
        </form>
      </div>
      <div class="col-md-6 mt-3 ">
        <form id="upload-multiple" enctype="multipart/form-data">
          <h2 class="fw-bold d-flex align-items-center mb-3" style="border: 1px solid #0e0d10; padding: auto; padding-left: 10px; padding-right: 10px; border-radius: 5px; padding-top: 10px; padding-bottom: 10px; background-color: #cfcfcf;">
Multiple Images     <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-images" viewBox="0 0 16 16" style="margin-left: 10px;">
  <path d="M4.502 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3"/>
  <path d="M14.002 13a2 2 0 0 1-2 2h-10a2 2 0 0 1-2-2V5A2 2 0 0 1 2 3a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v8a2 2 0 0 1-1.998 2M14 2H4a1 1 0 0 0-1 1h9.002a2 2 0 0 1 2 2v7A1 1 0 0 0 15 11V3a1 1 0 0 0-1-1M2.002 4a1 1 0 0 0-1 1v8l2.646-2.354a.5.5 0 0 1 .63-.062l2.66 1.773 3.71-3.71a.5.5 0 0 1 .577-.094l1.777 1.947V5a1 1 0 0 0-1-1h-10"/>
</svg>     </h2>
          <label for="image">Add images</label>
          <input type="file" name="images" class="form-control" id="image-input-multiple" accept="image/jpeg, image/png" required multiple />
          <label for="hastags">Hastags</label>
          <div class="hashtag-dropdown-multiple">
            <div class="selected-hashtags-multiple">
            </div>
            <input type="text" class="form-control" id="hashtag-input-multiple" placeholder="Select hashtags...">
            <ul class="hashtag-list-multiple">
              <% for (let hastag of hastags) { %>
                <li>#<%=hastag%>
                </li>
                <% } %>
                  <!-- Add more hashtags as needed -->
            </ul>
          </div>
          <div class="hastag error"></div>
          <button type="submit" class="mt-3 color=#458CCB">
Upload     <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-cloud-arrow-up" viewBox="0 0 16 16" style="margin-left: 10px;">
  <path fill-rule="evenodd" d="M7.646 5.146a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 6.707V10.5a.5.5 0 0 1-1 0V6.707L6.354 7.854a.5.5 0 1 1-.708-.708z"/>
  <path d="M4.406 3.342A5.53 5.53 0 0 1 8 2c2.69 0 4.923 2 5.166 4.579C14.758 6.804 16 8.137 16 9.773 16 11.569 14.502 13 12.687 13H3.781C1.708 13 0 11.366 0 9.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383zm.653.757c-.757.653-1.153 1.44-1.153 2.056v.448l-.445.049C2.064 6.805 1 7.952 1 9.318 1 10.785 2.23 12 3.781 12h8.906C13.98 12 15 10.988 15 9.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 4.825 10.328 3 8 3a4.53 4.53 0 0 0-2.941 1.1z"/>
</svg>       
          </button>
        </form>
      </div>
    </div>
  </div><div class="container" style="justify-content: center;">
  <div class="progress mt-5" style="height: 50px; max-width: auto; justify-content: center; margin-left: 20px;">
    <div class="progress-bar bg-primary" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
  </div>
  <!-- Success message -->
  <div class="alert alert-success mt-3" role="alert" style="display: none;">
    Upload successful!
  </div>
  <!-- Error message -->
  <div class="alert alert-danger mt-3" role="alert" style="display: none;">
    Upload failed!
</div>
</div>
  <footer>House of Pixels OPC Pvt Ltd for copyright &#169;</footer>


  <script>

    const hashtagInput = document.getElementById('hashtag-input');
    const hashtagList = document.querySelector('.hashtag-list');
    hashtagList.style.display = 'none';
    const selectedHashtags = document.querySelector('.selected-hashtags');
    const selectedHashtagsList = [];

    const hashtagInputMultiple = document.getElementById('hashtag-input-multiple');
    const hashtagListMultiple = document.querySelector('.hashtag-list-multiple');
    hashtagListMultiple.style.display = 'none';
    const selectedHashtagsMultiple = document.querySelector('.selected-hashtags-multiple');
    const selectedHashtagsMultipleList = [];

    hashtagInput.addEventListener('input', () => {
      const inputText = hashtagInput.value.toLowerCase();
      const hashtags = Array.from(hashtagList.querySelectorAll('li'));

      if (inputText) {
        hashtagList.style.display = 'block';
      } else {
        hashtagList.style.display = 'none';
      }

      hashtags.forEach((hashtag) => {
        const text = hashtag.textContent.toLowerCase();
        if (text.includes(inputText)) {
          hashtag.style.display = 'block';
        } else {
          hashtag.style.display = 'none';
        }
      });
    });

    hashtagInputMultiple.addEventListener('input', () => {
      const inputText = hashtagInputMultiple.value.toLowerCase();
      const hashtags = Array.from(hashtagListMultiple.querySelectorAll('li'));

      if (inputText) {
        hashtagListMultiple.style.display = 'block';
      } else {
        hashtagListMultiple.style.display = 'none';
      }

      hashtags.forEach((hashtag) => {
        const text = hashtag.textContent.toLowerCase();
        if (text.includes(inputText)) {
          hashtag.style.display = 'block';
        } else {
          hashtag.style.display = 'none';
        }
      });
    });

    hashtagList.addEventListener('click', (event) => {
      if (event.target.tagName === 'LI') {
        const selectedHashtag = document.createElement('div');
        selectedHashtag.textContent = event.target.textContent;
        selectedHashtag.className = 'selected-hashtag';
        selectedHashtags.appendChild(selectedHashtag);
        selectedHashtagsList.push(event.target.textContent);
        console.log(selectedHashtagsList);
        hashtagInput.value = '';
        hashtagList.style.display = 'none';
      }
    });

    hashtagListMultiple.addEventListener('click', (event) => {
      if (event.target.tagName === 'LI') {
        const selectedHashtag = document.createElement('div');
        selectedHashtag.textContent = event.target.textContent;
        selectedHashtag.className = 'selected-hashtag';
        selectedHashtagsMultiple.appendChild(selectedHashtag);
        selectedHashtagsMultipleList.push(event.target.textContent);
        console.log(selectedHashtagsMultipleList);
        hashtagInputMultiple.value = '';
        hashtagListMultiple.style.display = 'none';
      }
    });

    selectedHashtags.addEventListener('click', (event) => {
      if (event.target.tagName === 'DIV') {
        var index = selectedHashtagsList.indexOf(event.target.textContent);
        if (index > -1) {
          selectedHashtagsList.splice(index, 1);
        }
        console.log(selectedHashtagsList);
        event.target.remove();
      }
    });

    selectedHashtagsMultiple.addEventListener('click', (event) => {
      if (event.target.tagName === 'DIV') {
        var index = selectedHashtagsMultipleList.indexOf(event.target.textContent);
        if (index > -1) {
          selectedHashtagsMultipleList.splice(index, 1);
        }
        console.log(selectedHashtagsMultipleList);
        event.target.remove();
      }
    });

    const formSingle = document.getElementById('upload-single');
    formSingle.addEventListener('submit', async (e) => {
      e.preventDefault();
      const imageInput = document.getElementById('image-input');
      const image = imageInput.files[0];
      // console.log(image);

      const formData = new FormData();
      formData.append('photo', image);
      formData.append('hashtags', JSON.stringify(selectedHashtagsList));

      console.log(formData);

      try {
        const res = await fetch('/upload', {
          method: 'POST',
          body: formData,
        });
      }
      catch (err) {
        console.log(err);
      }
    });

    const formMultiple = document.getElementById('upload-multiple');
    formMultiple.addEventListener('submit', async (e) => {
      e.preventDefault();
      const imageInput = document.getElementById('image-input-multiple');
      const images = imageInput.files;


      const formData = new FormData();

      for (let i = 0; i < images.length; i++) {
        formData.append('images', images[i]);
      }
      formData.append('hashtagsMultiple', JSON.stringify(selectedHashtagsMultipleList));

      // console.log(formData);

      try {
        const res = await fetch('/upload-multiple', {
          method: 'POST',
          body: formData,
        });
      }
      catch (err) {
        console.log(err);
      }
    });

    const commonProgressBar = document.querySelector('.progress-bar');
  const successMessage = document.querySelector('.alert-success');

  const simulateProgress = () => {
    let width = 1;
    const interval = setInterval(() => {
      commonProgressBar.style.width = width + '%';
      commonProgressBar.setAttribute('aria-valuenow', width);
      width++;
      if (width >= 100) {
        clearInterval(interval);
        showSuccessMessage();
      }
    }, 10); // Adjust this timing for the desired speed of the progress bar
  };

  const showSuccessMessage = () => {
    successMessage.style.display = 'block';
    setTimeout(() => {
      location.reload(); // Refresh the page after 2 seconds
    }, 5000);
  };

  formSingle.addEventListener('submit', async (e) => {
    e.preventDefault();
    simulateProgress();
    const imageInput = document.getElementById('image-input');
    const image = imageInput.files[0];

    const formData = new FormData();
    formData.append('photo', image);
    formData.append('hashtags', JSON.stringify(selectedHashtagsList));

    try {
      // Simulated progress, you'd normally put your actual fetch here
      await new Promise((resolve) => setTimeout(resolve, 1000));
      // Simulated completion
      console.log('Upload completed for single image.');
    } catch (err) {
      console.log(err);
    }
  });

  formMultiple.addEventListener('submit', async (e) => {
    e.preventDefault();
    simulateProgress();
    const imageInput = document.getElementById('image-input-multiple');
    const images = imageInput.files;

    const formData = new FormData();

    for (let i = 0; i < images.length; i++) {
      formData.append('images', images[i]);
    }
    formData.append('hashtagsMultiple', JSON.stringify(selectedHashtagsMultipleList));

    try {
      // Simulated progress, you'd normally put your actual fetch here
      await new Promise((resolve) => setTimeout(resolve, 1000));
      // Simulated completion
      console.log('Upload completed for multiple images.');
    } catch (err) {
      console.log(err);
    }
  });
  </script>

  </body>

  </html>
